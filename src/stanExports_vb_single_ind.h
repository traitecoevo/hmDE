// Generated by rstantools.  Do not edit by hand.

/*
    rmot is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmot is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmot.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_vb_single_ind_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'vb_single_ind', line 51, column 2 to column 24)",
                                                      " (in 'vb_single_ind', line 52, column 2 to column 31)",
                                                      " (in 'vb_single_ind', line 53, column 2 to column 29)",
                                                      " (in 'vb_single_ind', line 55, column 2 to column 35)",
                                                      " (in 'vb_single_ind', line 83, column 2 to column 20)",
                                                      " (in 'vb_single_ind', line 84, column 2 to column 24)",
                                                      " (in 'vb_single_ind', line 85, column 2 to column 17)",
                                                      " (in 'vb_single_ind', line 86, column 2 to column 27)",
                                                      " (in 'vb_single_ind', line 87, column 2 to column 25)",
                                                      " (in 'vb_single_ind', line 90, column 6 to column 25)",
                                                      " (in 'vb_single_ind', line 89, column 23 to line 91, column 5)",
                                                      " (in 'vb_single_ind', line 89, column 4 to line 91, column 5)",
                                                      " (in 'vb_single_ind', line 97, column 6 to column 62)",
                                                      " (in 'vb_single_ind', line 96, column 11 to line 98, column 5)",
                                                      " (in 'vb_single_ind', line 94, column 6 to column 73)",
                                                      " (in 'vb_single_ind', line 95, column 6 to column 43)",
                                                      " (in 'vb_single_ind', line 92, column 17 to line 96, column 5)",
                                                      " (in 'vb_single_ind', line 92, column 4 to line 98, column 5)",
                                                      " (in 'vb_single_ind', line 88, column 19 to line 99, column 3)",
                                                      " (in 'vb_single_ind', line 88, column 2 to line 99, column 3)",
                                                      " (in 'vb_single_ind', line 59, column 13 to column 18)",
                                                      " (in 'vb_single_ind', line 59, column 2 to column 20)",
                                                      " (in 'vb_single_ind', line 60, column 2 to column 17)",
                                                      " (in 'vb_single_ind', line 61, column 2 to column 27)",
                                                      " (in 'vb_single_ind', line 62, column 2 to column 25)",
                                                      " (in 'vb_single_ind', line 65, column 6 to column 25)",
                                                      " (in 'vb_single_ind', line 64, column 23 to line 66, column 5)",
                                                      " (in 'vb_single_ind', line 64, column 4 to line 66, column 5)",
                                                      " (in 'vb_single_ind', line 69, column 6 to column 73)",
                                                      " (in 'vb_single_ind', line 67, column 17 to line 70, column 5)",
                                                      " (in 'vb_single_ind', line 67, column 4 to line 70, column 5)",
                                                      " (in 'vb_single_ind', line 63, column 19 to line 71, column 3)",
                                                      " (in 'vb_single_ind', line 63, column 2 to line 71, column 3)",
                                                      " (in 'vb_single_ind', line 73, column 2 to column 44)",
                                                      " (in 'vb_single_ind', line 76, column 2 to column 48)",
                                                      " (in 'vb_single_ind', line 77, column 2 to column 34)",
                                                      " (in 'vb_single_ind', line 78, column 2 to column 32)",
                                                      " (in 'vb_single_ind', line 80, column 2 to column 34)",
                                                      " (in 'vb_single_ind', line 41, column 2 to column 17)",
                                                      " (in 'vb_single_ind', line 42, column 2 to column 12)",
                                                      " (in 'vb_single_ind', line 43, column 13 to column 18)",
                                                      " (in 'vb_single_ind', line 43, column 2 to column 20)",
                                                      " (in 'vb_single_ind', line 44, column 16 to column 21)",
                                                      " (in 'vb_single_ind', line 44, column 2 to column 23)",
                                                      " (in 'vb_single_ind', line 45, column 12 to column 17)",
                                                      " (in 'vb_single_ind', line 45, column 2 to column 19)",
                                                      " (in 'vb_single_ind', line 46, column 2 to column 15)",
                                                      " (in 'vb_single_ind', line 83, column 13 to column 18)",
                                                      " (in 'vb_single_ind', line 84, column 17 to column 22)",
                                                      " (in 'vb_single_ind', line 6, column 4 to column 35)",
                                                      " (in 'vb_single_ind', line 5, column 30 to line 7, column 3)",
                                                      " (in 'vb_single_ind', line 9, column 4 to column 12)",
                                                      " (in 'vb_single_ind', line 10, column 4 to column 12)",
                                                      " (in 'vb_single_ind', line 11, column 4 to column 12)",
                                                      " (in 'vb_single_ind', line 12, column 4 to column 12)",
                                                      " (in 'vb_single_ind', line 13, column 4 to column 15)",
                                                      " (in 'vb_single_ind', line 14, column 4 to column 21)",
                                                      " (in 'vb_single_ind', line 15, column 4 to column 37)",
                                                      " (in 'vb_single_ind', line 16, column 4 to column 37)",
                                                      " (in 'vb_single_ind', line 17, column 4 to column 33)",
                                                      " (in 'vb_single_ind', line 18, column 4 to column 67)",
                                                      " (in 'vb_single_ind', line 19, column 4 to column 17)",
                                                      " (in 'vb_single_ind', line 8, column 51 to line 20, column 3)",
                                                      " (in 'vb_single_ind', line 22, column 4 to column 14)",
                                                      " (in 'vb_single_ind', line 23, column 4 to column 18)",
                                                      " (in 'vb_single_ind', line 24, column 4 to column 15)",
                                                      " (in 'vb_single_ind', line 25, column 4 to column 24)",
                                                      " (in 'vb_single_ind', line 26, column 4 to column 17)",
                                                      " (in 'vb_single_ind', line 27, column 4 to column 14)",
                                                      " (in 'vb_single_ind', line 30, column 6 to column 59)",
                                                      " (in 'vb_single_ind', line 32, column 6 to column 52)",
                                                      " (in 'vb_single_ind', line 34, column 6 to column 43)",
                                                      " (in 'vb_single_ind', line 28, column 30 to line 35, column 5)",
                                                      " (in 'vb_single_ind', line 28, column 4 to line 35, column 5)",
                                                      " (in 'vb_single_ind', line 36, column 4 to column 17)",
                                                      " (in 'vb_single_ind', line 21, column 62 to line 37, column 3)"};
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
DE(const T0__& y, const T1__& pars_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  const auto& pars = to_ref(pars_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 50;
    return (pars[(1 - 1)] * (pars[(2 - 1)] - y));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct DE_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
operator()(const T0__& y, const T1__& pars, std::ostream* pstream__)  const 
{
return DE(y, pars, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>
rk4_step(const T0__& y, const T1__& pars_arg__, const T2__& interval,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__>;
  const auto& pars = to_ref(pars_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ k1;
    k1 = DUMMY_VAR__;
    
    local_scalar_t__ k2;
    k2 = DUMMY_VAR__;
    
    local_scalar_t__ k3;
    k3 = DUMMY_VAR__;
    
    local_scalar_t__ k4;
    k4 = DUMMY_VAR__;
    
    local_scalar_t__ y_hat;
    y_hat = DUMMY_VAR__;
    
    current_statement__ = 57;
    k1 = DE(y, pars, pstream__);
    current_statement__ = 58;
    k2 = DE((y + ((interval * k1) / 2.0)), pars, pstream__);
    current_statement__ = 59;
    k3 = DE((y + ((interval * k2) / 2.0)), pars, pstream__);
    current_statement__ = 60;
    k4 = DE((y + (interval * k3)), pars, pstream__);
    current_statement__ = 61;
    y_hat = (y +
              (((1.0 / 6.0) * (((k1 + (2.0 * k2)) + (2.0 * k3)) + k4)) *
                interval));
    current_statement__ = 62;
    return y_hat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rk4_step_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>
operator()(const T0__& y, const T1__& pars, const T2__& interval,
           std::ostream* pstream__)  const 
{
return rk4_step(y, pars, interval, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>
rk4(const T0__& y, const T1__& pars_arg__, const T2__& interval,
    const T3__& step_size, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__>;
  const auto& pars = to_ref(pars_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int steps;
    steps = std::numeric_limits<int>::min();
    
    local_scalar_t__ duration;
    duration = DUMMY_VAR__;
    
    local_scalar_t__ y_hat;
    y_hat = DUMMY_VAR__;
    
    local_scalar_t__ step_size_temp;
    step_size_temp = DUMMY_VAR__;
    
    current_statement__ = 68;
    duration = 0;
    current_statement__ = 69;
    y_hat = y;
    current_statement__ = 74;
    while (logical_lt(duration, interval)) {
      current_statement__ = 70;
      step_size_temp = min((Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                         step_size, (interval - duration)).finished());
      current_statement__ = 71;
      y_hat = rk4_step(y_hat, pars, step_size_temp, pstream__);
      current_statement__ = 72;
      duration = (duration + step_size_temp);
    }
    current_statement__ = 75;
    return y_hat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rk4_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>
operator()(const T0__& y, const T1__& pars, const T2__& interval,
           const T3__& step_size, std::ostream* pstream__)  const 
{
return rk4(y, pars, interval, step_size, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_vb_single_ind final : public model_base_crtp<model_vb_single_ind> {
private:
  double step_size;
  int n_obs;
  std::vector<double> y_obs;
  std::vector<int> obs_index;
  std::vector<double> time;
  double y_0_obs;
 
public:
  ~model_vb_single_ind() { }
  
  inline std::string model_name() const final { return "model_vb_single_ind"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_vb_single_ind(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_vb_single_ind_namespace::model_vb_single_ind";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 39;
      context__.validate_dims("data initialization","step_size","double",
          context__.to_vec());
      step_size = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 39;
      step_size = context__.vals_r("step_size")[(1 - 1)];
      current_statement__ = 40;
      context__.validate_dims("data initialization","n_obs","int",
          context__.to_vec());
      n_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 41;
      validate_non_negative_index("y_obs", "n_obs", n_obs);
      current_statement__ = 42;
      context__.validate_dims("data initialization","y_obs","double",
          context__.to_vec(n_obs));
      y_obs = std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 42;
      assign(y_obs, nil_index_list(), context__.vals_r("y_obs"),
        "assigning variable y_obs");
      current_statement__ = 43;
      validate_non_negative_index("obs_index", "n_obs", n_obs);
      current_statement__ = 44;
      context__.validate_dims("data initialization","obs_index","int",
          context__.to_vec(n_obs));
      obs_index = std::vector<int>(n_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 44;
      assign(obs_index, nil_index_list(), context__.vals_i("obs_index"),
        "assigning variable obs_index");
      current_statement__ = 45;
      validate_non_negative_index("time", "n_obs", n_obs);
      current_statement__ = 46;
      context__.validate_dims("data initialization","time","double",
          context__.to_vec(n_obs));
      time = std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 46;
      assign(time, nil_index_list(), context__.vals_r("time"),
        "assigning variable time");
      current_statement__ = 47;
      context__.validate_dims("data initialization","y_0_obs","double",
          context__.to_vec());
      y_0_obs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      y_0_obs = context__.vals_r("y_0_obs")[(1 - 1)];
      current_statement__ = 48;
      validate_non_negative_index("y_hat", "n_obs", n_obs);
      current_statement__ = 49;
      validate_non_negative_index("Delta_hat", "n_obs", n_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_vb_single_ind_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ ind_y_0;
      ind_y_0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      ind_y_0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        ind_y_0 = stan::math::lb_constrain(ind_y_0, 0, lp__);
      } else {
        current_statement__ = 1;
        ind_y_0 = stan::math::lb_constrain(ind_y_0, 0);
      }
      local_scalar_t__ ind_growth_par;
      ind_growth_par = DUMMY_VAR__;
      
      current_statement__ = 2;
      ind_growth_par = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        ind_growth_par = stan::math::lb_constrain(ind_growth_par, 0, lp__);
      } else {
        current_statement__ = 2;
        ind_growth_par = stan::math::lb_constrain(ind_growth_par, 0);
      }
      local_scalar_t__ ind_max_size;
      ind_max_size = DUMMY_VAR__;
      
      current_statement__ = 3;
      ind_max_size = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        ind_max_size = stan::math::lb_constrain(ind_max_size, 0, lp__);
      } else {
        current_statement__ = 3;
        ind_max_size = stan::math::lb_constrain(ind_max_size, 0);
      }
      local_scalar_t__ global_error_sigma;
      global_error_sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      global_error_sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        global_error_sigma = stan::math::lb_constrain(global_error_sigma, 0,
                               lp__);
      } else {
        current_statement__ = 4;
        global_error_sigma = stan::math::lb_constrain(global_error_sigma, 0);
      }
      {
        current_statement__ = 21;
        validate_non_negative_index("y_hat", "n_obs", n_obs);
        std::vector<local_scalar_t__> y_hat;
        y_hat = std::vector<local_scalar_t__>(n_obs, DUMMY_VAR__);
        
        Eigen::Matrix<local_scalar_t__, -1, 1> pars;
        pars = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
        stan::math::fill(pars, DUMMY_VAR__);
        
        current_statement__ = 24;
        assign(pars, cons_list(index_uni(1), nil_index_list()),
          ind_growth_par, "assigning variable pars");
        current_statement__ = 25;
        assign(pars, cons_list(index_uni(2), nil_index_list()), ind_max_size,
          "assigning variable pars");
        current_statement__ = 33;
        for (int i = 1; i <= n_obs; ++i) {
          current_statement__ = 28;
          if (logical_eq(obs_index[(i - 1)], 1)) {
            current_statement__ = 26;
            assign(y_hat, cons_list(index_uni(i), nil_index_list()), ind_y_0,
              "assigning variable y_hat");
          } 
          current_statement__ = 31;
          if (logical_lt(i, n_obs)) {
            current_statement__ = 29;
            assign(y_hat, cons_list(index_uni((i + 1)), nil_index_list()),
              rk4(y_hat[(i - 1)], pars,
                (time[((i + 1) - 1)] - time[(i - 1)]), step_size, pstream__),
              "assigning variable y_hat");
          } }
        current_statement__ = 34;
        lp_accum__.add(
          normal_lpdf<propto__>(y_obs, y_hat, global_error_sigma));
        current_statement__ = 35;
        lp_accum__.add(
          normal_lpdf<propto__>(ind_y_0, y_0_obs, global_error_sigma));
        current_statement__ = 36;
        lp_accum__.add(lognormal_lpdf<propto__>(ind_growth_par, 0, 1));
        current_statement__ = 37;
        lp_accum__.add(lognormal_lpdf<propto__>(ind_max_size, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(cauchy_lpdf<propto__>(global_error_sigma, 1, 5));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_vb_single_ind_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double ind_y_0;
      ind_y_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      ind_y_0 = in__.scalar();
      current_statement__ = 1;
      ind_y_0 = stan::math::lb_constrain(ind_y_0, 0);
      double ind_growth_par;
      ind_growth_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      ind_growth_par = in__.scalar();
      current_statement__ = 2;
      ind_growth_par = stan::math::lb_constrain(ind_growth_par, 0);
      double ind_max_size;
      ind_max_size = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      ind_max_size = in__.scalar();
      current_statement__ = 3;
      ind_max_size = stan::math::lb_constrain(ind_max_size, 0);
      double global_error_sigma;
      global_error_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      global_error_sigma = in__.scalar();
      current_statement__ = 4;
      global_error_sigma = stan::math::lb_constrain(global_error_sigma, 0);
      vars__.emplace_back(ind_y_0);
      vars__.emplace_back(ind_growth_par);
      vars__.emplace_back(ind_max_size);
      vars__.emplace_back(global_error_sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y_hat;
      y_hat = std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Delta_hat;
      Delta_hat = std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> pars;
      pars = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(pars, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(pars, cons_list(index_uni(1), nil_index_list()), ind_growth_par,
        "assigning variable pars");
      current_statement__ = 9;
      assign(pars, cons_list(index_uni(2), nil_index_list()), ind_max_size,
        "assigning variable pars");
      current_statement__ = 20;
      for (int i = 1; i <= n_obs; ++i) {
        current_statement__ = 12;
        if (logical_eq(obs_index[(i - 1)], 1)) {
          current_statement__ = 10;
          assign(y_hat, cons_list(index_uni(i), nil_index_list()), ind_y_0,
            "assigning variable y_hat");
        } 
        current_statement__ = 18;
        if (logical_lt(i, n_obs)) {
          current_statement__ = 15;
          assign(y_hat, cons_list(index_uni((i + 1)), nil_index_list()),
            rk4(y_hat[(i - 1)], pars, (time[((i + 1) - 1)] - time[(i - 1)]),
              step_size, pstream__), "assigning variable y_hat");
          current_statement__ = 16;
          assign(Delta_hat, cons_list(index_uni(i), nil_index_list()),
            (y_hat[((i + 1) - 1)] - y_hat[(i - 1)]),
            "assigning variable Delta_hat");
        } else {
          current_statement__ = 13;
          assign(Delta_hat, cons_list(index_uni(i), nil_index_list()),
            (DE(y_hat[(i - 1)], pars, pstream__) *
              (time[(i - 1)] - time[((i - 1) - 1)])),
            "assigning variable Delta_hat");
        }}
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        vars__.emplace_back(y_hat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        vars__.emplace_back(Delta_hat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(pars[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double ind_y_0;
      ind_y_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      ind_y_0 = context__.vals_r("ind_y_0")[(1 - 1)];
      double ind_y_0_free__;
      ind_y_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      ind_y_0_free__ = stan::math::lb_free(ind_y_0, 0);
      double ind_growth_par;
      ind_growth_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      ind_growth_par = context__.vals_r("ind_growth_par")[(1 - 1)];
      double ind_growth_par_free__;
      ind_growth_par_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      ind_growth_par_free__ = stan::math::lb_free(ind_growth_par, 0);
      double ind_max_size;
      ind_max_size = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      ind_max_size = context__.vals_r("ind_max_size")[(1 - 1)];
      double ind_max_size_free__;
      ind_max_size_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      ind_max_size_free__ = stan::math::lb_free(ind_max_size, 0);
      double global_error_sigma;
      global_error_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      global_error_sigma = context__.vals_r("global_error_sigma")[(1 - 1)];
      double global_error_sigma_free__;
      global_error_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      global_error_sigma_free__ = stan::math::lb_free(global_error_sigma, 0);
      vars__.emplace_back(ind_y_0_free__);
      vars__.emplace_back(ind_growth_par_free__);
      vars__.emplace_back(ind_max_size_free__);
      vars__.emplace_back(global_error_sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("ind_y_0");
    names__.emplace_back("ind_growth_par");
    names__.emplace_back("ind_max_size");
    names__.emplace_back("global_error_sigma");
    names__.emplace_back("y_hat");
    names__.emplace_back("Delta_hat");
    names__.emplace_back("pars");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_obs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_obs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "ind_y_0");
    param_names__.emplace_back(std::string() + "ind_growth_par");
    param_names__.emplace_back(std::string() + "ind_max_size");
    param_names__.emplace_back(std::string() + "global_error_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Delta_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pars" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "ind_y_0");
    param_names__.emplace_back(std::string() + "ind_growth_par");
    param_names__.emplace_back(std::string() + "ind_max_size");
    param_names__.emplace_back(std::string() + "global_error_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Delta_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pars" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ind_y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ind_growth_par\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ind_max_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_error_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" << n_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Delta_hat\",\"type\":{\"name\":\"array\",\"length\":" << n_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"pars\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ind_y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ind_growth_par\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ind_max_size\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_error_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" << n_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Delta_hat\",\"type\":{\"name\":\"array\",\"length\":" << n_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"pars\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_vb_single_ind_namespace::model_vb_single_ind;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_vb_single_ind_namespace::profiles__;
}
#endif
#endif
